{
  "name": "i2c-bus",
  "version": "0.8.0",
  "description": "I2C serial computer bus access",
  "main": "i2c-bus.js",
  "directories": {
    "example": "example",
    "test": "test"
  },
  "scripts": {
    "test": "echo \"Tests can only be run manually from the command line.\" && exit 1",
    "install": "node-gyp rebuild"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/fivdi/i2c-bus.git"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "dependencies": {
    "bindings": "~1.2.1",
    "nan": "~1.4.1"
  },
  "keywords": [
    "i2c",
    "smbus",
    "linux"
  ],
  "author": {
    "name": "fivdi"
  },
  "license": "MIT",
  "gypfile": true,
  "readme": "## i2c-bus\n\nI2C serial computer bus access on Linux boards such as the Raspberry Pi or\nBeagleBone. All methods have asynchronous and synchronous forms.\n\n## Installation\n\n    $ npm install i2c-bus\n\n## Example 1 - Determine Temperature\n\nDetermine the temperature with a [DS1621 Digital Thermometer and Thermostat](http://www.maximintegrated.com/en/products/analog/sensors-and-sensor-interface/DS1621.html).\n\n<img src=\"https://github.com/fivdi/i2c-bus/raw/master/example/ds1621_bb.png\">\n\n```js\nvar i2c = require('i2c-bus'),\n  i2c1 = i2c.openSync(1);\n\nvar DS1621_ADDR = 0x48,\n  CMD_ACCESS_CONFIG = 0xac,\n  CMD_READ_TEMP = 0xaa,\n  CMD_START_CONVERT = 0xee;\n\nfunction rawTempToTemp(rawTemp) {\n  var halfDegrees = ((rawTemp & 0xff) << 1) + (rawTemp >> 15);\n\n  if ((halfDegrees & 0x100) === 0) {\n    return halfDegrees / 2; // Temp +ve\n  }\n\n  return -((~halfDegrees & 0xff) / 2); // Temp -ve\n}\n\n(function () {\n  var rawTemp;\n\n  // Enter one shot mode (this is a non volatile setting)\n  i2c1.writeByteSync(DS1621_ADDR, CMD_ACCESS_CONFIG, 0x01);\n\n  // Wait while non volatile memory busy\n  while (i2c1.readByteSync(DS1621_ADDR, CMD_ACCESS_CONFIG) & 0x10) {\n  }\n\n  // Start temperature conversion\n  i2c1.sendByteSync(DS1621_ADDR, CMD_START_CONVERT);\n\n  // Wait for temperature conversion to complete\n  while ((i2c1.readByteSync(DS1621_ADDR, CMD_ACCESS_CONFIG) & 0x80) === 0) {\n  }\n\n  // Display temperature\n  rawTemp = i2c1.readWordSync(DS1621_ADDR, CMD_READ_TEMP);\n  console.log('temp: ' + rawTempToTemp(rawTemp));\n\n  i2c1.closeSync();\n}());\n```\n\n## Example 2 - One Bus Two Devices\n\nThis example shows how to access two devices on the same bus; a\n[DS1621 Digital Thermometer and Thermostat](http://www.maximintegrated.com/en/products/analog/sensors-and-sensor-interface/DS1621.html)\nand an\n[Adafruit TSL2561 Digital Luminosity/Lux/Light Sensor](http://www.adafruit.com/products/439).\n\n```js\nvar i2c = require('i2c-bus'),\n  i2c1 = i2c.openSync(1);\n\nvar DS1621_ADDR = 0x48,\n  DS1621_CMD_ACCESS_TH = 0xa1;\n\nvar TSL2561_ADDR = 0x39,\n  TSL2561_CMD = 0x80,\n  TSL2561_REG_ID = 0x0a;\n\n(function () {\n  var ds1621TempHigh = i2c1.readWordSync(DS1621_ADDR, DS1621_CMD_ACCESS_TH),\n    tsl2561Id = i2c1.readByteSync(TSL2561_ADDR, TSL2561_CMD | TSL2561_REG_ID);\n\n  console.log(\"ds1621TempHigh: \" + ds1621TempHigh);\n  console.log(\"tsl2561Id: \" + tsl2561Id);\n\n  i2c1.closeSync();\n}());\n```\n\n## API\n\nAll methods have asynchronous and synchronous forms.\n\nThe asynchronous form always take a completion callback as its last argument.\nThe arguments passed to the completion callback depend on the method, but the\nfirst argument is always reserved for an exception. If the operation was\ncompleted successfully, then the first argument will be null or undefined.\n\nWhen using the synchronous form any exceptions are immediately thrown. You can\nuse try/catch to handle exceptions or allow them to bubble up. \n\n### Methods\n\n- [open(busNumber, cb)](https://github.com/fivdi/i2c-bus#openbusnumber-cb)\n- [openSync(busNumber)](https://github.com/fivdi/i2c-bus#opensyncbusnumber)\n\n### Class Bus\n\n- Free resources\n  - [bus.close(cb)](https://github.com/fivdi/i2c-bus#busclosecb)\n  - [bus.closeSync()](https://github.com/fivdi/i2c-bus#busclosesync)\n\n- Information\n  - [bus.i2cFuncs(cb)](https://github.com/fivdi/i2c-bus#busi2cfuncscb)\n  - [bus.i2cFuncsSync()](https://github.com/fivdi/i2c-bus#busi2cfuncssync)\n\n- Plain I2C\n  - [bus.i2cRead(addr, length, buffer, cb)](https://github.com/fivdi/i2c-bus#busi2creadaddr-length-buffer-cb)\n  - [bus.i2cReadSync(addr, length, buffer)](https://github.com/fivdi/i2c-bus#busi2creadsyncaddr-length-buffer)\n  - [bus.i2cWrite(addr, length, buffer, cb)](https://github.com/fivdi/i2c-bus#busi2cwriteaddr-length-buffer-cb)\n  - [bus.i2cWriteSync(addr, length, buffer)](https://github.com/fivdi/i2c-bus#busi2cwritesyncaddr-length-buffer)\n\n- SMBus\n  - [bus.readByte(addr, cmd, cb)](https://github.com/fivdi/i2c-bus#busreadbyteaddr-cmd-cb)\n  - [bus.readByteSync(addr, cmd)](https://github.com/fivdi/i2c-bus#busreadbytesyncaddr-cmd)\n  - [bus.readWord(addr, cmd, cb)](https://github.com/fivdi/i2c-bus#busreadwordaddr-cmd-cb)\n  - [bus.readWordSync(addr, cmd)](https://github.com/fivdi/i2c-bus#busreadwordsyncaddr-cmd)\n  - [bus.readI2cBlock(addr, cmd, length, buffer, cb)](https://github.com/fivdi/i2c-bus#busreadi2cblockaddr-cmd-length-buffer-cb)\n  - [bus.readI2cBlockSync(addr, cmd, length, buffer)](https://github.com/fivdi/i2c-bus#busreadi2cblocksyncaddr-cmd-length-buffer)\n  - [bus.receiveByte(addr, cb)](https://github.com/fivdi/i2c-bus#busreceivebyteaddr-cb)\n  - [bus.receiveByteSync(addr)](https://github.com/fivdi/i2c-bus#busreceivebytesyncaddr)\n  - [bus.sendByte(addr, val, cb)](https://github.com/fivdi/i2c-bus#bussendbyteaddr-val-cb)\n  - [bus.sendByteSync(addr, val)](https://github.com/fivdi/i2c-bus#bussendbytesyncaddr-val)\n  - [bus.writeByte(addr, cmd, val, cb)](https://github.com/fivdi/i2c-bus#buswritebyteaddr-cmd-val-cb)\n  - [bus.writeByteSync(addr, cmd, val)](https://github.com/fivdi/i2c-bus#buswritebytesyncaddr-cmd-val)\n  - [bus.writeWord(addr, cmd, val, cb)](https://github.com/fivdi/i2c-bus#buswritewordaddr-cmd-val-cb)\n  - [bus.writeWordSync(addr, cmd, val)](https://github.com/fivdi/i2c-bus#buswritewordsyncaddr-cmd-val)\n  - [bus.writeI2cBlock(addr, cmd, length, buffer, cb)](https://github.com/fivdi/i2c-bus#buswritei2cblockaddr-cmd-length-buffer-cb)\n  - [bus.writeI2cBlockSync(addr, cmd, length, buffer)](https://github.com/fivdi/i2c-bus#buswritei2cblocksyncaddr-cmd-length-buffer)\n\n### Class I2cFuncs\n\n- [funcs.i2c](https://github.com/fivdi/i2c-bus#funcsi2c---boolean)\n- [funcs.tenBitAddr](https://github.com/fivdi/i2c-bus#funcstenbitaddr---boolean)\n- [funcs.protocolMangling](https://github.com/fivdi/i2c-bus#funcsprotocolmangling---boolean)\n- [funcs.smbusPec](https://github.com/fivdi/i2c-bus#funcssmbuspec---boolean)\n- [funcs.smbusBlockProcCall](https://github.com/fivdi/i2c-bus#funcssmbusblockproccall---boolean)\n- [funcs.smbusQuick](https://github.com/fivdi/i2c-bus#funcssmbusquick---boolean)\n- [funcs.smbusReceiveByte](https://github.com/fivdi/i2c-bus#funcssmbusreceivebyte---boolean)\n- [funcs.smbusSendByte](https://github.com/fivdi/i2c-bus#funcssmbussendbyte---boolean)\n- [funcs.smbusReadByte](https://github.com/fivdi/i2c-bus#funcssmbusreadbyte---boolean)\n- [funcs.smbusWriteByte](https://github.com/fivdi/i2c-bus#funcssmbuswritebyte---boolean)\n- [funcs.smbusReadWord](https://github.com/fivdi/i2c-bus#funcssmbusreadword---boolean)\n- [funcs.smbusWriteWord](https://github.com/fivdi/i2c-bus#funcssmbuswriteword---boolean)\n- [funcs.smbusProcCall](https://github.com/fivdi/i2c-bus#funcssmbusproccall---boolean)\n- [funcs.smbusReadBlock](https://github.com/fivdi/i2c-bus#funcssmbusreadblock---boolean)\n- [funcs.smbusWriteBlock](https://github.com/fivdi/i2c-bus#funcssmbuswriteblock---boolean)\n- [funcs.smbusReadI2cBlock](https://github.com/fivdi/i2c-bus#funcssmbusreadi2cblock---boolean)\n- [funcs.smbusWriteI2cBlock](https://github.com/fivdi/i2c-bus#funcssmbuswritei2cblock---boolean)\n\n### open(busNumber, cb)\n- busNumber - the number of the I2C bus/adapter to open, 0 for /dev/i2c-0, 1 for /dev/i2c-1, ...\n- cb - completion callback\n\nAsynchronous open. Returns a new Bus object. The callback gets one argument (err).\n\n### openSync(busNumber)\n- busNumber - the number of the I2C bus/adapter to open, 0 for /dev/i2c-0, 1 for /dev/i2c-1, ...\n\nSynchronous open. Returns a new Bus object.\n\n### bus.close(cb)\n- cb - completion callback\n\nAsynchronous close. The callback gets one argument (err).\n\n### bus.closeSync()\n\nSynchronous close.\n\n### bus.i2cFuncs(cb)\n- cb - completion callback\n\nDetermine functionality of the bus/adapter asynchronously. The callback gets\ntwo argument (err, funcs). funcs is a frozen\n[I2cFuncs](https://github.com/fivdi/i2c-bus#class-i2cfuncs)\nobject describing the functionality available.\nSee also [I2C functionality](https://www.kernel.org/doc/Documentation/i2c/functionality).\n\n### bus.i2cFuncsSync()\n\nDetermine functionality of the bus/adapter Synchronously. Returns a frozen\n[I2cFuncs](https://github.com/fivdi/i2c-bus#class-i2cfuncs)\nobject describing the functionality available.\nSee also [I2C functionality](https://www.kernel.org/doc/Documentation/i2c/functionality).\n\n### bus.i2cRead(addr, length, buffer, cb)\n- addr - I2C device address\n- length - an integer specifying the number of bytes to read\n- buffer - the buffer that the data will be written to (must conatin at least length bytes)\n- cb - completion callback\n\nAsynchronous plain I2C read. The callback gets three argument (err, bytesRead, buffer).\nbytesRead is the number of bytes read.\n\n### bus.i2cReadSync(addr, length, buffer)\n- addr - I2C device address\n- length - an integer specifying the number of bytes to read\n- buffer - the buffer that the data will be written to (must conatin at least length bytes)\n\nSynchronous plain I2C read. Returns the number of bytes read.\n\n### bus.i2cWrite(addr, length, buffer, cb)\n- addr - I2C device address\n- length - an integer specifying the number of bytes to write\n- buffer - the buffer containing the data to write (must conatin at least length bytes)\n- cb - completion callback\n\nAsynchronous plain I2C write. The callback gets three argument (err, bytesWritten, buffer).\nbytesWritten is the number of bytes written.\n\n### bus.i2cWriteSync(addr, length, buffer)\n- addr - I2C device address\n- length - an integer specifying the number of bytes to write\n- buffer - the buffer containing the data to write (must conatin at least length bytes)\n\nSynchronous plain I2C write. Returns the number of bytes written.\n\n### bus.readByte(addr, cmd, cb)\n- addr - I2C device address\n- cmd - command code\n- cb - completion callback\n\nAsynchronous SMBus read byte. The callback gets two arguments (err, byte).\n\n### bus.readByteSync(addr, cmd)\n- addr - I2C device address\n- cmd - command code\n\nSynchronous SMBus read byte. Returns the byte read.\n\n### bus.readWord(addr, cmd, cb)\n- addr - I2C device address\n- cmd - command code\n- cb - completion callback\n\nAsynchronous SMBus read word. The callback gets two arguments (err, word).\n\n### bus.readWordSync(addr, cmd)\n- addr - I2C device address\n- cmd - command code\n\nSynchronous SMBus read word. Returns the word read.\n\n### bus.readI2cBlock(addr, cmd, length, buffer, cb)\n- addr - I2C device address\n- cmd - command code\n- length - an integer specifying the number of bytes to read (max 32)\n- buffer - the buffer that the data will be written to (must conatin at least length bytes)\n- cb - completion callback\n\nAsynchronous I2C block read (not defined by the SMBus specification). Reads a\nblock of bytes from a device, from a designated register that is specified by\ncmd. The callback gets three arguments (err, bytesRead, buffer). bytesRead is\nthe number of bytes read.\n\n### bus.readI2cBlockSync(addr, cmd, length, buffer)\n- addr - I2C device address\n- cmd - command code\n- length - an integer specifying the number of bytes to read (max 32)\n- buffer - the buffer that the data will be written to (must conatin at least length bytes)\n\nSynchronous I2C block read (not defined by the SMBus specification). Reads a\nblock of bytes from a device, from a designated register that is specified by\ncmd. Returns the number of bytes read.\n\n### bus.receiveByte(addr, cb)\n- addr - I2C device address\n- cb - completion callback\n\nAsynchronous SMBus receive byte. The callback gets two arguments (err, byte).\n\n### bus.receiveByteSync(addr)\n- addr - I2C device address\n\nSynchronous SMBus receive byte. Returns the byte received.\n\n### bus.sendByte(addr, val, cb)\n- addr - I2C device address\n- val - data byte\n- cb - completion callback\n\nAsynchronous SMBus send byte. The callback gets one argument (err).\n\n### bus.sendByteSync(addr, val)\n- addr - I2C device address\n- val - data byte\n\nSynchronous SMBus send byte.\n\n### bus.writeByte(addr, cmd, val, cb)\n- addr - I2C device address\n- cmd - command code\n- val - data byte\n- cb - completion callback\n\nAsynchronous SMBus write byte. The callback gets one argument (err).\n\n### bus.writeByteSync(addr, cmd, val)\n- addr - I2C device address\n- cmd - command code\n- val - data byte\n\nSynchronous SMBus write byte.\n\n### bus.writeWord(addr, cmd, val, cb)\n- addr - I2C device address\n- cmd - command code\n- val - data word\n- cb - completion callback\n\nAsynchronous SMBus write word. The callback gets one argument (err).\n\n### bus.writeWordSync(addr, cmd, val)\n- addr - I2C device address\n- cmd - command code\n- val - data word\n\nSynchronous SMBus write word.\n\n### bus.writeI2cBlock(addr, cmd, length, buffer, cb)\n- addr - I2C device address\n- cmd - command code\n- length - an integer specifying the number of bytes to write (max 32)\n- buffer - the buffer containing the data to write (must conatin at least length bytes)\n- cb - completion callback\n\nAsynchronous I2C block write (not defined by the SMBus specification). Writes a\nblock of bytes to a device, to a designated register that is specified by cmd.\nThe callback gets one argument (err).\n\n### bus.writeI2cBlockSync(addr, cmd, length, buffer)\n- addr - I2C device address\n- cmd - command code\n- length - an integer specifying the number of bytes to write (max 32)\n- buffer - the buffer containing the data to write (must conatin at least length bytes)\n\nSynchronous I2C block write (not defined by the SMBus specification). Writes a\nblock of bytes to a device, to a designated register that is specified by cmd.\n\n### funcs.i2c - boolean\nSpecifies whether or not the adapter handles plain I2C-level commands (Pure\nSMBus adapters typically can not do these,\nI2C_FUNC_I2C).\n\n### funcs.tenBitAddr - boolean\nSpecifies whether or not the adapter handles the 10-bit address extensions\n(I2C_FUNC_10BIT_ADDR).\n\n### funcs.protocolMangling - boolean\nSpecifies whether or not the adapter knows about the I2C_M_IGNORE_NAK,\nI2C_M_REV_DIR_ADDR and I2C_M_NO_RD_ACK flags (which modify the I2C protocol!\nI2C_FUNC_PROTOCOL_MANGLING).\n\n### funcs.smbusPec - boolean\nSpecifies whether or not the adapter handles packet error checking\n(I2C_FUNC_SMBUS_PEC).\n\n### funcs.smbusBlockProcCall - boolean\nSpecifies whether or not the adapter handles the SMBus block process call\ncommand\n(I2C_FUNC_SMBUS_BLOCK_PROC_CALL).\n\n### funcs.smbusQuick - boolean\nSpecifies whether or not the adapter handles the SMBus quick command\n(I2C_FUNC_SMBUS_QUICK).\n\n### funcs.smbusReceiveByte - boolean\nSpecifies whether or not the adapter handles the SMBus receive byte command\n(I2C_FUNC_SMBUS_READ_BYTE).\n\n### funcs.smbusSendByte - boolean\nSpecifies whether or not the adapter handles the SMBus send byte command\n(I2C_FUNC_SMBUS_WRITE_BYTE).\n\n### funcs.smbusReadByte - boolean\nSpecifies whether or not the adapter handles the SMBus read byte command\n(I2C_FUNC_SMBUS_READ_BYTE_DATA).\n\n### funcs.smbusWriteByte - boolean\nSpecifies whether or not the adapter handles the SMBus write byte command\n(I2C_FUNC_SMBUS_WRITE_BYTE_DATA).\n\n### funcs.smbusReadWord - boolean\nSpecifies whether or not the adapter handles the SMBus read word command\n(I2C_FUNC_SMBUS_READ_WORD_DATA).\n\n### funcs.smbusWriteWord - boolean\nSpecifies whether or not the adapter handles the SMBus write word command\n(I2C_FUNC_SMBUS_WRITE_WORD_DATA).\n\n### funcs.smbusProcCall - boolean\nSpecifies whether or not the adapter handles the SMBus process call command\n(I2C_FUNC_SMBUS_PROC_CALL).\n\n### funcs.smbusReadBlock - boolean\nSpecifies whether or not the adapter handles the SMBus read block command\n(I2C_FUNC_SMBUS_READ_BLOCK_DATA).\n\n### funcs.smbusWriteBlock - boolean\nSpecifies whether or not the adapter handles the SMBus write block command\n(I2C_FUNC_SMBUS_WRITE_BLOCK_DATA).\n\n### funcs.smbusReadI2cBlock - boolean\nSpecifies whether or not the adapter handles the SMBus read I2C block command\n(I2C_FUNC_SMBUS_READ_I2C_BLOCK).\n\n### funcs.smbusWriteI2cBlock - boolean\nSpecifies whether or not the adapter handles the SMBus write i2c block command\n(I2C_FUNC_SMBUS_WRITE_I2C_BLOCK).\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/fivdi/i2c-bus/issues"
  },
  "_id": "i2c-bus@0.8.0",
  "dist": {
    "shasum": "94d52294c2dded236928bfb76b03cad71cd2dda3"
  },
  "_from": "i2c-bus@^0.8.0",
  "_resolved": "https://registry.npmjs.org/i2c-bus/-/i2c-bus-0.8.0.tgz"
}
